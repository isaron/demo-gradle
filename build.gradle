buildscript {
    ext {
        springBootVersion = '2.2.10.RELEASE'
    }
    repositories {
        maven {
            url "${nexusUrl}/repository/maven-public/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.4.0"
        classpath 'com.bmuschko:gradle-docker-plugin:6.6.0'
    }
}

plugins {
//   id 'org.springframework.boot' version '2.2.10.RELEASE'
//   id 'io.spring.dependency-management' version '1.0.8.RELEASE'
//   id "org.sonarqube" version "2.8"
//   id 'com.bmuschko.docker-remote-api' version '5.2.0'
//   id 'com.google.cloud.tools.jib' version '2.4.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'maven-publish'
apply plugin: "org.sonarqube"
apply plugin: 'com.google.cloud.tools.jib'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: "com.bmuschko.docker-spring-boot-application"

group = 'com.ssii.rdp'
description = "Demo spring-boot project with Gradle."
version = "${projectVersion}"
sourceCompatibility = 1.8

repositories {
    maven {
        url "${nexusUrl}/repository/maven-public/"
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    // implementation('com.h2database:h2')
    // implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')

    compile 'io.github.yedaxia:japidocs:1.3'

    // compile 'com.google.cloud.tools:jib-core:0.15.0'
}


// ================= SonarQube ===================

sonarqube {
    properties {
        property "sonar.host.url", 'http://sonar.ssii.com'
        property "sonar.login", 'b3a692fb7f0d4d7a31cc9cdf1559ced0e8ede4bd'
        property "sonar.sourceEncoding", "UTF-8"
        property 'sonar.projectName', '${rootProject.name}'
    }
}

// ================= Publish to maven-local =================

publishing {
    publications {
        maven(MavenPublication) {
            artifactId rootProject.name
            from components.java
            groupId project.group
            version project.version
        }
    }
    repositories {
        maven {
            credentials {
                username "${nexusUsername}"
                password "${nexusPassword}"
            }
            if (!project.version.endsWith('-SNAPSHOT')) {
                url "${nexusUrl}/repository/maven-releases"
            } else {
                url "${nexusUrl}/repository/maven-snapshots"
            }
        }
    }
}


// ============= Using jib-core without Docker daemon ====================



// ============= Using jib-gradle-plugin without Docker daemon ================
jib {
    // extraDirectory = file('build/extra-directory')
    // dependsOn setupExtraDir
    from {
        image = "${registryUrl}/base/openjdk:11-jre-slim"
        auth {
            username = "${nexusUsername}"
            password = "${nexusPassword}"
        }
    }
    to {
        image = "${registryUrl}/${projectGroup}/${projectName}:${projectVersion}"
        auth {
            username = "${nexusUsername}"
            password = "${nexusPassword}"
        }
    }
    container {
        jvmFlags = ['-Xms512m', '-Xmx512m', '-Xdebug', '-XshowSettings:vm', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseContainerSupport']
        mainClass = 'com.ssii.rdp.demogradle.DemoGradleApplication'
        // args = ['some', 'args']
        ports = ['8080']
        // labels = [key1:'value1', key2:'value2']
        format = 'Docker'
        // useCurrentTimestamp = true
    }
    // allowInsecureRegistries = true
}

// task setupExtraDir(type: Copy) {
//   from file('build/generated/files')
//   into file('build/extra-directory/my/files')
// }

// tasks.build.dependsOn tasks.jib

// ============= Using gradle-docker-plugin with Docker daemon ====================
docker {
    url = 'tcp://${dockerbot}:2375'
    // url = 'unix:///var/run/docker.sock'  //Docker daemon on linux
    // url = 'tcp://127.0.0.1:2375'         //Docker daemon on windows or linux

    registryCredentials {
        url = '${registryUrl}'
        username = '${nexusUsername}'
        password = '${nexusPassword}'
    }
}

import com.bmuschko.gradle.docker.tasks.image.*

task getDockerfile(type: Dockerfile) {
    destFile = project.file('Dockerfile')
}

task buildImage(type: DockerBuildImage) {
    dependsOn getDockerfile
    inputDir = getDockerfile.destFile.get().asFile.parentFile
    tags.add('${registryUrl}/${projectGroup}/${projectName}:${projectVersion}')
}

task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    imageName = buildImage.tags.get().first()
}

task docker {
    dependsOn pushImage
}
