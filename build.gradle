buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        maven {
            url "${nexusUrl}/repository/maven-public/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        // classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:1.0.0"
        // classpath 'com.bmuschko:gradle-docker-plugin:4.2.0'
    }
}

plugins {
  id "org.sonarqube" version "2.7"
//   id 'com.bmuschko.docker-remote-api' version '4.2.0'
//   id "com.google.cloud.tools.jib" version "1.0.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'maven-publish'
// apply plugin: "org.sonarqube"
apply plugin: "com.google.cloud.tools.jib"
// apply plugin: 'com.bmuschko.docker-remote-api'


group = 'com.ssii.rdp'
description = "Demo spring-boot project with Gradle."
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    maven {
        url "${nexusUrl}/repository/maven-public/"
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('com.h2database:h2')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')

    // compile 'com.google.cloud.tools:jib-core:0.1.1'
}


// ================= SonarQube ===================

sonarqube {
    properties {
        // property "sonar.host.url", 'http://sonar.ssii.com'
        // property "sonar.login", '78e4c996818567e429196c8076dee35166351f1e'
        property "sonar.sourceEncoding", "UTF-8"
        property 'sonar.projectName', '${rootProject.name}'
    }
}

// ================= Publish to maven-local =================

publishing {
    publications {
        maven(MavenPublication) {
            artifactId rootProject.name
            from components.java
            groupId project.group
            version project.version
        }
    }
    repositories {
        maven {
            credentials {
                username "${nexusUsername}"
                password "${nexusPassword}"
            }
            if (!project.version.endsWith('-SNAPSHOT')) {
                url "${nexusUrl}/repository/maven-releases"
            } else {
                url "${nexusUrl}/repository/maven-snapshots"
            }
        }
    }
}


// ============= Using jib-core ====================



// ============= Using jib-gradle-plugin ================
// jib {
//     from {
//         image = 'openjdk:11-jre-slim'
//     }
//     to {
//         image = "${registryUrl}/${project.group}/${rootProject.name}:${project.version}"
//         auth {
//             username='${nexusUsername}'
//             password='${nexusPassword}'
//         }
//     }
//     // container {
//     //     jvmFlags = ['-Xms512m', '-Xdebug', '-Xmy:flag=jib-rules']
//     //     mainClass = 'com.ssii.rdp.demogradle.DemoGradleApplication'
//     //     args = ['some', 'args']
//     //     ports = ['1000', '2000-2003/udp']
//     //     labels = [key1:'value1', key2:'value2']
//     //     format = 'OCI'
//     // }
// }


// ============= Using gradle-docker-plugin ====================
// docker {
//     url = 'tcp://${dockerbot}:2375'
//     // url = 'unix:///var/run/docker.sock'  //Docker daemon on linux
//     // url = 'tcp://127.0.0.1:2375'         //Docker daemon on windows or linux

//     registryCredentials {
//         url = '${registryUrl}'
//         username = '${nexusUsername}'
//         password = '${nexusPassword}'
//     }
// }

// import com.bmuschko.gradle.docker.tasks.image.*

// task getDockerfile(type: Dockerfile) {
//     destFile = project.file('Dockerfile')
// }

// task buildImage(type: DockerBuildImage) {
//     dependsOn getDockerfile
//     inputDir = getDockerfile.destFile.get().asFile.parentFile
//     tags.add('${registryUrl}/${rootProject.name}:${project.version}')
// }

// task pushImage(type: DockerPushImage) {
//     dependsOn buildImage
//     imageName = buildImage.tags.get().first()
// }

// task docker {
//     dependsOn pushImage
// }
