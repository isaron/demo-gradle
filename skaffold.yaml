apiVersion: skaffold/v1beta3
kind: Config
build:
  artifacts:
  - image: containers.ssii.com/com.ssii.rdp/demo-gradle
    context: .
    # sync:
    #   '*.java': .

    # docker:
    #   # Dockerfile's location relative to workspace. Defaults to "Dockerfile"
    #   dockerfile: Dockerfile
    #   # Key/value arguements passed to the docker build.
    #   buildArgs:
    #     key1: "value1"
    #     key2: "value2"
    #   # Images to consider as cache sources
    #   cacheFrom:
    #   - golang:1.10.1-alpine3.7
    #   - alpine:3.7
    #   # Dockerfile target name to build.
    #   # target: stageName

    # Using the Jib plugin for Gradle.
    jibGradle: {}
      # project: projectname
  
  local:
    # false by default for local clusters, true for remote clusters
    push: false
    useDockerCLI: false
    useBuildkit: false

  # kaniko:
  #   buildContext:
  #     localDir: {}
  #   cache:
  #     repo: containers.ssii.com/my-project/skaffold/cache
  #   flags:
  #     - --aditional-flag
  #   pullSecret: /a/secret/path/serviceaccount.json
  #   pullSecretName: kaniko-secret
  #   namespace: default
  #   timeout: 20m
  #   image: defaults to the latest released version of `gcr.io/kaniko-project/executor`
  #   dockerConfig:
  #     path: path to the docker config.json
  #     secretName: docker-cfg

deploy:
  # kubectl:
    # manifests to deploy from files.
    # manifests:
    # - ./k8s-*
    # flags:
    #   global: [""]
    #   apply: [""]
    #   delete: [""]

    # manifests to deploy from remote cluster.
    # The path to where these manifests live in remote kubernetes cluster.
    # Example
    # remoteManifests:
    # - deployment/web-app1
    # - namespace:deployment/web-app2

 # kustomize:
    # path: .
    # flags:
    #   global: [""]
    #   apply: [""]
    #   delete: [""]

 helm:
    releases:
    - name: demo-gradle
      chartPath: charts
      valuesFiles:
      - charts/values.yaml
      values:
        image: demo-gradle
      namespace: demo
      version: ""
      recreatePods: false
    
      # # setValues get appended to the helm deploy with --set.
      # setValues:
      #  key: "value"
    
      # # overrides builds an override values.yaml file to run with the helm deploy
      # overrides:
      #   some:
      #     key: someValue
      
      # # packaged section allows to package chart setting specific version
      # # and/or appVersion using "helm package" command.
      # packaged:
      #   # version is passed to "helm package --version" flag.
      #   # Note that you can specify both static string or dynamic template.
      #   version: {{ .CHART_VERSION }}-dirty
      #   # appVersion is passed to "helm package --app-version" flag.
      #   # Note that you can specify both static string or dynamic template.
      #   appVersion: {{ .CHART_VERSION }}-dirty